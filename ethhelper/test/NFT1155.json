{
  "address": "0xA61291Aa73D7B8cf3447430DfB2BaB559F68ee52",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Level",
          "name": "level",
          "type": "uint8"
        }
      ],
      "name": "ApprovalLevel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "ratio",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "Royalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "info",
      "outputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_ratio",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "infoBatch",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_ratios",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isMined",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_mined",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "isMinedBatch",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_mineds",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_miner",
          "type": "address"
        }
      ],
      "name": "isMiner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_super",
          "type": "address"
        }
      ],
      "name": "isSuper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_royaltyRatio",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_royaltyRatios",
          "type": "uint16[]"
        },
        {
          "internalType": "string[]",
          "name": "_tokenURIs",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royalty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfoBatch",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_royaltys",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "enum Level",
          "name": "_level",
          "type": "uint8"
        }
      ],
      "name": "setLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_ratio",
          "type": "uint16"
        }
      ],
      "name": "setRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_ratios",
          "type": "uint16[]"
        }
      ],
      "name": "setRoyaltyBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1824c5438d13081d5208bc1255c2d79f49a5e03b01a197f3546d117b999fad1e",
  "receipt": {
    "to": null,
    "from": "0x077d34394Ed01b3f31fBd9816cF35d4558146066",
    "contractAddress": "0xA61291Aa73D7B8cf3447430DfB2BaB559F68ee52",
    "transactionIndex": 19,
    "gasUsed": "2676273",
    "logsBloom": "0x0080000000000000000000000000000000000800000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000002000000000000000000080000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000100000000000000000000000000000000000000100000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb4b1d00d55c46d87c8034a9a87fefd4cef13c90a857ad3905405008267d1667d",
    "transactionHash": "0x1824c5438d13081d5208bc1255c2d79f49a5e03b01a197f3546d117b999fad1e",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 9358321,
        "transactionHash": "0x1824c5438d13081d5208bc1255c2d79f49a5e03b01a197f3546d117b999fad1e",
        "address": "0xA61291Aa73D7B8cf3447430DfB2BaB559F68ee52",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000077d34394ed01b3f31fbd9816cf35d4558146066"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0xb4b1d00d55c46d87c8034a9a87fefd4cef13c90a857ad3905405008267d1667d"
      }
    ],
    "blockNumber": 9358321,
    "cumulativeGasUsed": "5513863",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://ipfs.io/ipns/k51qzi5uqu5dgxi52mqszdhfyd6tamuaughjz6dgzas0doyl4o5bgv5r5azhlp/{id}.json"
  ],
  "solcInputHash": "1ff926bd33e0f53ceab33c80ef7286d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Level\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"ApprovalLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"ratio\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Royalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_ratio\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"infoBatch\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_ratios\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isMined\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_mined\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"isMinedBatch\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_mineds\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"isMiner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_super\",\"type\":\"address\"}],\"name\":\"isSuper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_royaltyRatio\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_royaltyRatios\",\"type\":\"uint16[]\"},{\"internalType\":\"string[]\",\"name\":\"_tokenURIs\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royalty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"royaltyInfoBatch\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_royaltys\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"enum Level\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"setLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_ratio\",\"type\":\"uint16\"}],\"name\":\"setRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_ratios\",\"type\":\"uint16[]\"}],\"name\":\"setRoyaltyBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT1155.sol\":\"NFT1155\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x2f27682302bd27f76399273e73cedecd2de098aa101401a3b5f2196f520da6c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xbda715785876dbfc675396b89ac45bb9f4cceb968133a8258924d163a700f0e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/NFT1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"./TokenURI.sol\\\";\\nimport \\\"./utils/Approval.sol\\\";\\nimport \\\"./interfaces/IRoyalty.sol\\\";\\n\\n// \\u57fa\\u4e8eERC1155\\u5b9e\\u73b0\\u7248\\u7a0e\\u529f\\u80fd\\u7684\\u5e26\\u6743\\u9650\\u7ba1\\u7406\\u7684NFT\\u5408\\u7ea6\\n// \\u53ef\\u4ee5\\u6388\\u4e88\\u8d85\\u7ea7\\u6743\\u9650\\uff08\\u53d1\\u884c\\u548c\\u7ba1\\u7406\\u6240\\u6709NFT\\uff09\\n// \\u53ef\\u4ee5\\u6388\\u4e88\\u53d1\\u884c\\u6743\\u9650\\uff08\\u4ec5\\u53d1\\u884cNFT\\uff09\\ncontract NFT1155 is ERC1155, TokenURI, Approval, IRoyalty {\\n    mapping(uint256 => address) private receivers; // \\u63a5\\u6536\\u8005\\n    mapping(uint256 => uint16) private ratios; // \\u8d39\\u7387\\uff08\\u4e07\\u5206\\u4e4b\\u4e00\\uff09\\n    mapping(uint256 => bool) private mineds; //\\u5df2\\u53d1\\u884c\\n\\n    event Royalty(uint256 id, uint16 ratio, address receiver);\\n\\n    constructor(string memory _uri) ERC1155(_uri) {}\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(IERC165, ERC1155)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == IRoyalty.royaltyInfoBatch.selector ||\\n            interfaceId == IRoyalty.royaltyInfo.selector ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function isApprovedForAll(address _account, address _operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            _isSuper(_operator) || super.isApprovedForAll(_account, _operator);\\n    }\\n\\n    function royaltyInfo(uint256 _id, uint256 _price)\\n        external\\n        view\\n        override\\n        returns (address _receiver, uint256 _royalty)\\n    {\\n        return _royaltyInfo(_id, _price);\\n    }\\n\\n    function royaltyInfoBatch(uint256[] memory _ids, uint256 _price)\\n        external\\n        view\\n        override\\n        returns (address[] memory _receivers, uint256[] memory _royaltys)\\n    {\\n        _receivers = new address[](_ids.length);\\n        _royaltys = new uint256[](_ids.length);\\n        uint256 price = _price / _ids.length;\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            (_receivers[i], _royaltys[i]) = _royaltyInfo(_ids[i], price);\\n        }\\n    }\\n\\n    function setRoyalty(uint256 _id, uint16 _ratio) external override {\\n        address receiver = receivers[_id];\\n        require(\\n            receiver == msg.sender || isApprovedForAll(receiver, msg.sender),\\n            \\\"NFT1155: caller is not owner nor approved\\\"\\n        );\\n        _setRoyalty(_id, receiver, _ratio);\\n    }\\n\\n    function setRoyaltyBatch(uint256[] memory _ids, uint16[] memory _ratios)\\n        external\\n        override\\n    {\\n        require(\\n            _ids.length == _ratios.length,\\n            \\\"NFT1155: ids and ratios length mismatch\\\"\\n        );\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            address receiver = receivers[_ids[i]];\\n            require(\\n                receiver == msg.sender ||\\n                    isApprovedForAll(receiver, msg.sender),\\n                \\\"NFT1155: caller is not owner nor approved\\\"\\n            );\\n            _setRoyalty(_ids[i], receiver, _ratios[i]);\\n        }\\n    }\\n\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        uint16 _royaltyRatio,\\n        string memory _tokenURI,\\n        bytes memory _data\\n    ) external onlyMiner {\\n        _mint(_to, _id, _amount, _data);\\n        require(!mineds[_id], \\\"NFT1155: the id already mined\\\");\\n        _setTokenURI(_id, _tokenURI);\\n        _setRoyalty(_id, _to, _royaltyRatio);\\n        mineds[_id] = true;\\n    }\\n\\n    function mintBatch(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        uint16[] memory _royaltyRatios,\\n        string[] memory _tokenURIs,\\n        bytes memory _data\\n    ) external onlyMiner {\\n        _mintBatch(_to, _ids, _amounts, _data);\\n        require(\\n            _ids.length == _royaltyRatios.length,\\n            \\\"NFT1155: ids and ratios length mismatch\\\"\\n        );\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            require(!mineds[_ids[i]], \\\"NFT1155: the id already mined\\\");\\n            _setTokenURI(_ids[i], _tokenURIs[i]);\\n            _setRoyalty(_ids[i], _to, _royaltyRatios[i]);\\n            mineds[_ids[i]] = true;\\n        }\\n    }\\n\\n    function isMined(uint256 _id) external view returns (bool _mined) {\\n        return mineds[_id];\\n    }\\n\\n    function isMinedBatch(uint256[] memory _ids)\\n        external\\n        view\\n        returns (bool[] memory _mineds)\\n    {\\n        _mineds = new bool[](_ids.length);\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            _mineds[i] = mineds[_ids[i]];\\n        }\\n    }\\n\\n    function info(uint256 _id)\\n        external\\n        view\\n        returns (address _receiver, uint16 _ratio)\\n    {\\n        return _info(_id);\\n    }\\n\\n    function infoBatch(uint256[] memory _ids)\\n        external\\n        view\\n        returns (address[] memory _receivers, uint16[] memory _ratios)\\n    {\\n        _receivers = new address[](_ids.length);\\n        _ratios = new uint16[](_ids.length);\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            (_receivers[i], _ratios[i]) = _info(_ids[i]);\\n        }\\n    }\\n\\n    function _royaltyInfo(uint256 _id, uint256 _price)\\n        internal\\n        view\\n        returns (address, uint256)\\n    {\\n        return (receivers[_id], (_price * ratios[_id]) / 10000);\\n    }\\n\\n    function _info(uint256 _id) internal view returns (address, uint16) {\\n        return (receivers[_id], ratios[_id]);\\n    }\\n\\n    function _setRoyalty(\\n        uint256 _id,\\n        address _receiver,\\n        uint16 _ratio\\n    ) internal {\\n        require(_ratio <= 8000, \\\"NFT1155: ratio more than 8000\\\");\\n        require(_receiver != address(0), \\\"NFT1155: receiver can not be zero\\\");\\n        ratios[_id] = _ratio;\\n        receivers[_id] = _receiver;\\n        emit Royalty(_id, _ratio, _receiver);\\n    }\\n}\\n\",\"keccak256\":\"0xfd6e179f55ecf32fc8af0ff7ac7e4870a576ee609c8dbaccc5d8cfa3c402ba10\",\"license\":\"MIT\"},\"contracts/TokenURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract TokenURI {\\n    mapping(uint256 => string) private tokenURIs;\\n\\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\\n        return tokenURIs[_tokenId];\\n    }\\n\\n    function _setTokenURI(uint256 _tokenId, string memory _tokenURI) internal {\\n        tokenURIs[_tokenId] = _tokenURI;\\n    }\\n}\\n\",\"keccak256\":\"0xf981570638c13a1e67e820e4c3c030524e73b014011180e0cf600cab7acd7b66\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\ninterface IRoyalty is IERC165 {\\n    // \\u67e5\\u8be2\\u7248\\u7a0e\\u63a5\\u6536\\u5730\\u5740\\uff08\\u53d1\\u884c\\u5730\\u5740\\uff09\\u548c\\u91d1\\u989d\\n    function royaltyInfo(uint256 _id, uint256 _price)\\n        external\\n        view\\n        returns (address _receiver, uint256 _royalty);\\n\\n    // \\u6279\\u91cf\\u67e5\\u8be2\\u7248\\u7a0e\\u63a5\\u6536\\u5730\\u5740\\uff08\\u53d1\\u884c\\u5730\\u5740\\uff09\\u548c\\u91d1\\u989d\\n    function royaltyInfoBatch(uint256[] memory _ids, uint256 _price)\\n        external\\n        view\\n        returns (address[] memory _receivers, uint256[] memory _royaltys);\\n\\n    // \\u8bbe\\u7f6e\\u7248\\u7a0e\\uff0c\\u7248\\u7a0e\\u8d39\\u7387\\u5355\\u4f4d\\u4e07\\u5206\\u4e4b\\u4e00\\uff0c\\u5e94\\u8be5\\u53ea\\u6709\\u53d1\\u884c\\u8005\\u53ef\\u4ee5\\u4fee\\u6539\\n    function setRoyalty(uint256 _id, uint16 _ratio) external;\\n\\n    // \\u6279\\u91cf\\u8bbe\\u7f6e\\u7248\\u7a0e\\uff0c\\u7248\\u7a0e\\u8d39\\u7387\\u5355\\u4f4d\\u4e07\\u5206\\u4e4b\\u4e00\\uff0c\\u5e94\\u8be5\\u53ea\\u6709\\u53d1\\u884c\\u8005\\u53ef\\u4ee5\\u4fee\\u6539\\n    function setRoyaltyBatch(uint256[] memory _ids, uint16[] memory _ratios)\\n        external;\\n}\\n\",\"keccak256\":\"0xf72d235e25e6df3198d608b79e8fd6d1e5a1932ff5422181ae49b18fbf4beb91\",\"license\":\"MIT\"},\"contracts/utils/Approval.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nenum Level {\\n    None,\\n    Miner,\\n    Super\\n}\\n\\n// \\u6743\\u9650\\u7ba1\\u7406\\uff0cowner\\u624d\\u80fd\\u66f4\\u6539\\uff0csuper\\u4e5f\\u6709miner\\u6743\\u9650\\ncontract Approval is Ownable {\\n    mapping(address => Level) private approvals;\\n\\n    event ApprovalLevel(address indexed addr, Level level);\\n\\n    constructor() {\\n        approvals[msg.sender] = Level.Super;\\n    }\\n\\n    modifier onlyMiner() {\\n        require(\\n            approvals[msg.sender] >= Level.Miner,\\n            \\\"Approval: only miner to operate\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlySuper() {\\n        require(\\n            approvals[msg.sender] >= Level.Super,\\n            \\\"Approval: only super to operate\\\"\\n        );\\n        _;\\n    }\\n\\n    function setLevel(address _addr, Level _level) external onlyOwner {\\n        approvals[_addr] = _level;\\n        emit ApprovalLevel(_addr, _level);\\n    }\\n\\n    function isMiner(address _miner) external view returns (bool) {\\n        return _isMiner(_miner);\\n    }\\n\\n    function isSuper(address _super) external view returns (bool) {\\n        return _isSuper(_super);\\n    }\\n\\n    function _isMiner(address _miner) internal view returns (bool) {\\n        return approvals[_miner] >= Level.Miner;\\n    }\\n\\n    function _isSuper(address _super) internal view returns (bool) {\\n        return approvals[_super] >= Level.Super;\\n    }\\n}\\n\",\"keccak256\":\"0xd0e47437d6232519cef420be30c7e981085ee62f6d9183fa49c00c25a49d1127\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002f7d38038062002f7d83398101604081905262000034916200017e565b8062000040816200006d565b506200004c3362000086565b50336000908152600560205260409020805460ff19166002179055620002a7565b805162000082906002906020840190620000d8565b5050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000e69062000254565b90600052602060002090601f0160209004810192826200010a576000855562000155565b82601f106200012557805160ff191683800117855562000155565b8280016001018555821562000155579182015b828111156200015557825182559160200191906001019062000138565b506200016392915062000167565b5090565b5b8082111562000163576000815560010162000168565b6000602080838503121562000191578182fd5b82516001600160401b0380821115620001a8578384fd5b818501915085601f830112620001bc578384fd5b815181811115620001d157620001d162000291565b604051601f8201601f19908116603f01168101908382118183101715620001fc57620001fc62000291565b81604052828152888684870101111562000214578687fd5b8693505b8284101562000237578484018601518185018701529285019262000218565b828411156200024857868684830101525b98975050505050505050565b600181811c908216806200026957607f821691505b602082108114156200028b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612cc680620002b76000396000f3fe608060405234801561001057600080fd5b50600436106101725760003560e01c8063715018a6116100de578063c3c8df9911610097578063e44a316911610071578063e44a3169146103e7578063e985e9c5146103fa578063f242432a1461040d578063f2fde38b1461042057600080fd5b8063c3c8df99146103a0578063c87b56dd146103b3578063d9e16218146103c657600080fd5b8063715018a6146103135780638031ae9b1461031b57806386384e4a1461032e5780638da5cb5b14610351578063a22cb4651461036c578063b645901c1461037f57600080fd5b80632a55205a116101305780632a55205a146102285780632e3405991461025a5780632eb2c2d6146102ba5780634e1273f4146102cd578063526858a1146102ed578063701b70ac1461030057600080fd5b8062fdd58e1461017757806301ffc9a71461019d57806302898e59146101c05780630d801835146101e05780630e89341c146101f557806311e3d8d714610215575b600080fd5b61018a610185366004612354565b610433565b6040519081526020015b60405180910390f35b6101b06101ab36600461257d565b6104ca565b6040519015158152602001610194565b6101d36101ce3660046124ab565b610510565b60405161019491906127eb565b6101f36101ee3660046124e5565b610601565b005b6102086102033660046125b5565b61071a565b604051610194919061287f565b6101f36102233660046125cd565b6107ae565b61023b6102363660046125ef565b610800565b604080516001600160a01b039093168352602083019190915201610194565b6102986102683660046125b5565b6000908152600660209081526040808320546007909252909120546001600160a01b039091169161ffff90911690565b604080516001600160a01b03909316835261ffff909116602083015201610194565b6101f36102c836600461210b565b610818565b6102e06102db3660046123e1565b6108af565b6040516101949190612831565b6101f36102fb366004612212565b610a10565b6101b061030e3660046120bf565b610c6d565b6101f3610c78565b6101f361032936600461237d565b610cae565b6101b061033c3660046125b5565b60009081526008602052604090205460ff1690565b6004546040516001600160a01b039091168152602001610194565b6101f361037a3660046122ec565b610dd0565b61039261038d36600461253b565b610ea7565b6040516101949291906127bd565b6101b06103ae3660046120bf565b61101b565b6102086103c13660046125b5565b611026565b6103d96103d43660046124ab565b611043565b604051610194929190612770565b6101f36103f5366004612326565b6111de565b6101b06104083660046120d9565b611295565b6101f361041b3660046121b0565b6112d7565b6101f361042e3660046120bf565b61135e565b60006001600160a01b0383166104a45760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216632d91640760e21b14806104fb57506001600160e01b0319821663152a902d60e11b145b8061050a575061050a826113f9565b92915050565b606081516001600160401b0381111561053957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610562578160200160208202803683370190505b50905060005b82518110156105fb576008600084838151811061059557634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060009054906101000a900460ff168282815181106105d957634e487b7160e01b600052603260045260246000fd5b91151560209283029190910190910152806105f381612b92565b915050610568565b50919050565b80518251146106225760405162461bcd60e51b815260040161049b906129e7565b60005b82518110156107155760006006600085848151811061065457634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518252810191909152604001600020546001600160a01b031690503381148061068d575061068d8133611295565b6106a95760405162461bcd60e51b815260040161049b9061291f565b6107028483815181106106cc57634e487b7160e01b600052603260045260246000fd5b6020026020010151828585815181106106f557634e487b7160e01b600052603260045260246000fd5b6020026020010151611449565b508061070d81612b92565b915050610625565b505050565b60606002805461072990612b31565b80601f016020809104026020016040519081016040528092919081815260200182805461075590612b31565b80156107a25780601f10610777576101008083540402835291602001916107a2565b820191906000526020600020905b81548152906001019060200180831161078557829003601f168201915b50505050509050919050565b6000828152600660205260409020546001600160a01b0316338114806107d957506107d98133611295565b6107f55760405162461bcd60e51b815260040161049b9061291f565b610715838284611449565b60008061080d848461158a565b915091509250929050565b6001600160a01b03851633148061083457506108348533611295565b61089b5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161049b565b6108a885858585856115cc565b5050505050565b606081518351146109145760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161049b565b600083516001600160401b0381111561093d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610966578160200160208202803683370190505b50905060005b8451811015610a08576109cd85828151811061099857634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106109c057634e487b7160e01b600052603260045260246000fd5b6020026020010151610433565b8282815181106109ed57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610a0181612b92565b905061096c565b509392505050565b60013360009081526005602052604090205460ff166002811115610a4457634e487b7160e01b600052602160045260246000fd5b1015610a925760405162461bcd60e51b815260206004820152601f60248201527f417070726f76616c3a206f6e6c79206d696e657220746f206f70657261746500604482015260640161049b565b610a9e86868684611784565b8251855114610abf5760405162461bcd60e51b815260040161049b906129e7565b60005b8551811015610c645760086000878381518110610aef57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182528101919091526040016000205460ff1615610b5a5760405162461bcd60e51b815260206004820152601d60248201527f4e4654313135353a2074686520696420616c7265616479206d696e6564000000604482015260640161049b565b610bb2868281518110610b7d57634e487b7160e01b600052603260045260246000fd5b6020026020010151848381518110610ba557634e487b7160e01b600052603260045260246000fd5b60200260200101516118eb565b610bfe868281518110610bd557634e487b7160e01b600052603260045260246000fd5b6020026020010151888684815181106106f557634e487b7160e01b600052603260045260246000fd5b600160086000888481518110610c2457634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610c5c90612b92565b915050610ac2565b50505050505050565b600061050a8261190a565b6004546001600160a01b03163314610ca25760405162461bcd60e51b815260040161049b906129b2565b610cac6000611952565b565b60013360009081526005602052604090205460ff166002811115610ce257634e487b7160e01b600052602160045260246000fd5b1015610d305760405162461bcd60e51b815260206004820152601f60248201527f417070726f76616c3a206f6e6c79206d696e657220746f206f70657261746500604482015260640161049b565b610d3c868686846119a4565b60008581526008602052604090205460ff1615610d9b5760405162461bcd60e51b815260206004820152601d60248201527f4e4654313135353a2074686520696420616c7265616479206d696e6564000000604482015260640161049b565b610da585836118eb565b610db0858785611449565b505050600091825250600860205260409020805460ff1916600117905550565b336001600160a01b0383161415610e3b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161049b565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60608083516001600160401b03811115610ed157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610efa578160200160208202803683370190505b50915083516001600160401b03811115610f2457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f4d578160200160208202803683370190505b5090506000845184610f5f9190612af2565b905060005b855181101561101257610f9e868281518110610f9057634e487b7160e01b600052603260045260246000fd5b60200260200101518361158a565b858381518110610fbe57634e487b7160e01b600052603260045260246000fd5b60200260200101858481518110610fe557634e487b7160e01b600052603260045260246000fd5b60209081029190910101919091526001600160a01b0390911690528061100a81612b92565b915050610f64565b50509250929050565b600061050a82611a74565b600081815260036020526040902080546060919061072990612b31565b60608082516001600160401b0381111561106d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611096578160200160208202803683370190505b50915082516001600160401b038111156110c057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156110e9578160200160208202803683370190505b50905060005b83518110156111d85761115384828151811061111b57634e487b7160e01b600052603260045260246000fd5b60200260200101516000908152600660209081526040808320546007909252909120546001600160a01b039091169161ffff90911690565b84838151811061117357634e487b7160e01b600052603260045260246000fd5b6020026020010184848151811061119a57634e487b7160e01b600052603260045260246000fd5b602002602001018261ffff1661ffff16815250826001600160a01b03166001600160a01b0316815250505080806111d090612b92565b9150506110ef565b50915091565b6004546001600160a01b031633146112085760405162461bcd60e51b815260040161049b906129b2565b6001600160a01b0382166000908152600560205260409020805482919060ff1916600183600281111561124b57634e487b7160e01b600052602160045260246000fd5b0217905550816001600160a01b03167fe3db383ed6be73b83dd8d70de0d7a91a57662effa97e0e262f3e67a5ce81dfae826040516112899190612857565b60405180910390a25050565b60006112a082611a74565b806112d057506001600160a01b0380841660009081526001602090815260408083209386168352929052205460ff165b9392505050565b6001600160a01b0385163314806112f357506112f38533611295565b6113515760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161049b565b6108a88585858585611a7d565b6004546001600160a01b031633146113885760405162461bcd60e51b815260040161049b906129b2565b6001600160a01b0381166113ed5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161049b565b6113f681611952565b50565b60006001600160e01b03198216636cdb3d1360e11b148061142a57506001600160e01b031982166303a24d0760e21b145b8061050a57506301ffc9a760e01b6001600160e01b031983161461050a565b611f408161ffff16111561149f5760405162461bcd60e51b815260206004820152601d60248201527f4e4654313135353a20726174696f206d6f7265207468616e2038303030000000604482015260640161049b565b6001600160a01b0382166114ff5760405162461bcd60e51b815260206004820152602160248201527f4e4654313135353a2072656365697665722063616e206e6f74206265207a65726044820152606f60f81b606482015260840161049b565b6000838152600760209081526040808320805461ffff191661ffff8616908117909155600683529281902080546001600160a01b0319166001600160a01b0387169081179091558151878152928301939093528101919091527f611d12c0f8b2d9f4cfb23a30f560228db53e712dfcd34bb5b239e702efc2d22f9060600160405180910390a1505050565b600082815260066020908152604080832054600790925282205482916001600160a01b031690612710906115c29061ffff1686612b12565b61080d9190612af2565b81518351146115ed5760405162461bcd60e51b815260040161049b90612a2e565b6001600160a01b0384166116135760405162461bcd60e51b815260040161049b906128da565b3360005b845181101561171657600085828151811061164257634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061166e57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156116be5760405162461bcd60e51b815260040161049b90612968565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906116fb908490612ada565b925050819055505050508061170f90612b92565b9050611617565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611766929190612844565b60405180910390a461177c818787878787611b91565b505050505050565b6001600160a01b0384166117aa5760405162461bcd60e51b815260040161049b90612a76565b81518351146117cb5760405162461bcd60e51b815260040161049b90612a2e565b3360005b8451811015611883578381815181106117f857634e487b7160e01b600052603260045260246000fd5b602002602001015160008087848151811061182357634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461186b9190612ada565b9091555081905061187b81612b92565b9150506117cf565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516118d4929190612844565b60405180910390a46108a881600087878787611b91565b6000828152600360209081526040909120825161071592840190611e1f565b600060015b6001600160a01b03831660009081526005602052604090205460ff16600281111561194a57634e487b7160e01b600052602160045260246000fd5b101592915050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0384166119ca5760405162461bcd60e51b815260040161049b90612a76565b336119e4816000876119db88611cfc565b6108a888611cfc565b6000848152602081815260408083206001600160a01b038916845290915281208054859290611a14908490612ada565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46108a881600087878787611d55565b6000600261190f565b6001600160a01b038416611aa35760405162461bcd60e51b815260040161049b906128da565b33611ab38187876119db88611cfc565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611af45760405162461bcd60e51b815260040161049b90612968565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611b31908490612ada565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610c64828888888888611d55565b6001600160a01b0384163b1561177c5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611bd590899089908890889088906004016126cd565b602060405180830381600087803b158015611bef57600080fd5b505af1925050508015611c1f575060408051601f3d908101601f19168201909252611c1c91810190612599565b60015b611ccc57611c2b612bd9565b806308c379a01415611c655750611c40612bf1565b80611c4b5750611c67565b8060405162461bcd60e51b815260040161049b919061287f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161049b565b6001600160e01b0319811663bc197c8160e01b14610c645760405162461bcd60e51b815260040161049b90612892565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611d4457634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b1561177c5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611d99908990899088908890889060040161272b565b602060405180830381600087803b158015611db357600080fd5b505af1925050508015611de3575060408051601f3d908101601f19168201909252611de091810190612599565b60015b611def57611c2b612bd9565b6001600160e01b0319811663f23a6e6160e01b14610c645760405162461bcd60e51b815260040161049b90612892565b828054611e2b90612b31565b90600052602060002090601f016020900481019282611e4d5760008555611e93565b82601f10611e6657805160ff1916838001178555611e93565b82800160010185558215611e93579182015b82811115611e93578251825591602001919060010190611e78565b50611e9f929150611ea3565b5090565b5b80821115611e9f5760008155600101611ea4565b80356001600160a01b0381168114611ecf57600080fd5b919050565b600082601f830112611ee4578081fd5b81356020611ef182612ab7565b604051611efe8282612b66565b8381528281019150858301600585901b87018401881015611f1d578586fd5b855b85811015611f5d5781356001600160401b03811115611f3c578788fd5b611f4a8a87838c010161203f565b8552509284019290840190600101611f1f565b5090979650505050505050565b600082601f830112611f7a578081fd5b81356020611f8782612ab7565b604051611f948282612b66565b8381528281019150858301600585901b87018401881015611fb3578586fd5b855b85811015611f5d57611fc6826120ad565b84529284019290840190600101611fb5565b600082601f830112611fe8578081fd5b81356020611ff582612ab7565b6040516120028282612b66565b8381528281019150858301600585901b87018401881015612021578586fd5b855b85811015611f5d57813584529284019290840190600101612023565b600082601f83011261204f578081fd5b81356001600160401b0381111561206857612068612bc3565b60405161207f601f8301601f191660200182612b66565b818152846020838601011115612093578283fd5b816020850160208301379081016020019190915292915050565b803561ffff81168114611ecf57600080fd5b6000602082840312156120d0578081fd5b6112d082611eb8565b600080604083850312156120eb578081fd5b6120f483611eb8565b915061210260208401611eb8565b90509250929050565b600080600080600060a08688031215612122578081fd5b61212b86611eb8565b945061213960208701611eb8565b935060408601356001600160401b0380821115612154578283fd5b61216089838a01611fd8565b94506060880135915080821115612175578283fd5b61218189838a01611fd8565b93506080880135915080821115612196578283fd5b506121a38882890161203f565b9150509295509295909350565b600080600080600060a086880312156121c7578081fd5b6121d086611eb8565b94506121de60208701611eb8565b9350604086013592506060860135915060808601356001600160401b03811115612206578182fd5b6121a38882890161203f565b60008060008060008060c0878903121561222a578384fd5b61223387611eb8565b955060208701356001600160401b038082111561224e578586fd5b61225a8a838b01611fd8565b9650604089013591508082111561226f578586fd5b61227b8a838b01611fd8565b95506060890135915080821115612290578283fd5b61229c8a838b01611f6a565b945060808901359150808211156122b1578283fd5b6122bd8a838b01611ed4565b935060a08901359150808211156122d2578283fd5b506122df89828a0161203f565b9150509295509295509295565b600080604083850312156122fe578182fd5b61230783611eb8565b91506020830135801515811461231b578182fd5b809150509250929050565b60008060408385031215612338578182fd5b61234183611eb8565b915060208301356003811061231b578182fd5b60008060408385031215612366578182fd5b61236f83611eb8565b946020939093013593505050565b60008060008060008060c08789031215612395578384fd5b61239e87611eb8565b955060208701359450604087013593506123ba606088016120ad565b925060808701356001600160401b03808211156123d5578384fd5b6122bd8a838b0161203f565b600080604083850312156123f3578182fd5b82356001600160401b0380821115612409578384fd5b818501915085601f83011261241c578384fd5b8135602061242982612ab7565b6040516124368282612b66565b8381528281019150858301600585901b870184018b1015612455578889fd5b8896505b8487101561247e5761246a81611eb8565b835260019690960195918301918301612459565b5096505086013592505080821115612494578283fd5b506124a185828601611fd8565b9150509250929050565b6000602082840312156124bc578081fd5b81356001600160401b038111156124d1578182fd5b6124dd84828501611fd8565b949350505050565b600080604083850312156124f7578182fd5b82356001600160401b038082111561250d578384fd5b61251986838701611fd8565b9350602085013591508082111561252e578283fd5b506124a185828601611f6a565b6000806040838503121561254d578182fd5b82356001600160401b03811115612562578283fd5b61256e85828601611fd8565b95602094909401359450505050565b60006020828403121561258e578081fd5b81356112d081612c7a565b6000602082840312156125aa578081fd5b81516112d081612c7a565b6000602082840312156125c6578081fd5b5035919050565b600080604083850312156125df578182fd5b82359150612102602084016120ad565b60008060408385031215612601578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b838110156126485781516001600160a01b031687529582019590820190600101612623565b509495945050505050565b6000815180845260208085019450808401835b8381101561264857815187529582019590820190600101612666565b60008151808452815b818110156126a75760208185018101518683018201520161268b565b818111156126b85782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a0604082018190526000906126f990830186612653565b828103606084015261270b8186612653565b9050828103608084015261271f8185612682565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061276590830184612682565b979650505050505050565b6040815260006127836040830185612610565b828103602084810191909152845180835285820192820190845b81811015611f5d57845161ffff168352938301939183019160010161279d565b6040815260006127d06040830185612610565b82810360208401526127e28185612653565b95945050505050565b6020808252825182820181905260009190848201906040850190845b81811015612825578351151583529284019291840191600101612807565b50909695505050505050565b6020815260006112d06020830184612653565b6040815260006127d06040830185612653565b602081016003831061287957634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260006112d06020830184612682565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526029908201527f4e4654313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526027908201527f4e4654313135353a2069647320616e6420726174696f73206c656e677468206d6040820152660d2e6dac2e8c6d60cb1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60006001600160401b03821115612ad057612ad0612bc3565b5060051b60200190565b60008219821115612aed57612aed612bad565b500190565b600082612b0d57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612b2c57612b2c612bad565b500290565b600181811c90821680612b4557607f821691505b602082108114156105fb57634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b0381118282101715612b8b57612b8b612bc3565b6040525050565b6000600019821415612ba657612ba6612bad565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612bee57600481823e5160e01c5b90565b600060443d1015612bff5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612c2e57505050505090565b8285019150815181811115612c465750505050505090565b843d8701016020828501011115612c605750505050505090565b612c6f60208286010187612b66565b509095945050505050565b6001600160e01b0319811681146113f657600080fdfea26469706673582212203d52216fafbcb65ffa8f431a3e85fffe096c8edafdca5c48f67c7031e88d89a164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101725760003560e01c8063715018a6116100de578063c3c8df9911610097578063e44a316911610071578063e44a3169146103e7578063e985e9c5146103fa578063f242432a1461040d578063f2fde38b1461042057600080fd5b8063c3c8df99146103a0578063c87b56dd146103b3578063d9e16218146103c657600080fd5b8063715018a6146103135780638031ae9b1461031b57806386384e4a1461032e5780638da5cb5b14610351578063a22cb4651461036c578063b645901c1461037f57600080fd5b80632a55205a116101305780632a55205a146102285780632e3405991461025a5780632eb2c2d6146102ba5780634e1273f4146102cd578063526858a1146102ed578063701b70ac1461030057600080fd5b8062fdd58e1461017757806301ffc9a71461019d57806302898e59146101c05780630d801835146101e05780630e89341c146101f557806311e3d8d714610215575b600080fd5b61018a610185366004612354565b610433565b6040519081526020015b60405180910390f35b6101b06101ab36600461257d565b6104ca565b6040519015158152602001610194565b6101d36101ce3660046124ab565b610510565b60405161019491906127eb565b6101f36101ee3660046124e5565b610601565b005b6102086102033660046125b5565b61071a565b604051610194919061287f565b6101f36102233660046125cd565b6107ae565b61023b6102363660046125ef565b610800565b604080516001600160a01b039093168352602083019190915201610194565b6102986102683660046125b5565b6000908152600660209081526040808320546007909252909120546001600160a01b039091169161ffff90911690565b604080516001600160a01b03909316835261ffff909116602083015201610194565b6101f36102c836600461210b565b610818565b6102e06102db3660046123e1565b6108af565b6040516101949190612831565b6101f36102fb366004612212565b610a10565b6101b061030e3660046120bf565b610c6d565b6101f3610c78565b6101f361032936600461237d565b610cae565b6101b061033c3660046125b5565b60009081526008602052604090205460ff1690565b6004546040516001600160a01b039091168152602001610194565b6101f361037a3660046122ec565b610dd0565b61039261038d36600461253b565b610ea7565b6040516101949291906127bd565b6101b06103ae3660046120bf565b61101b565b6102086103c13660046125b5565b611026565b6103d96103d43660046124ab565b611043565b604051610194929190612770565b6101f36103f5366004612326565b6111de565b6101b06104083660046120d9565b611295565b6101f361041b3660046121b0565b6112d7565b6101f361042e3660046120bf565b61135e565b60006001600160a01b0383166104a45760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216632d91640760e21b14806104fb57506001600160e01b0319821663152a902d60e11b145b8061050a575061050a826113f9565b92915050565b606081516001600160401b0381111561053957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610562578160200160208202803683370190505b50905060005b82518110156105fb576008600084838151811061059557634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060009054906101000a900460ff168282815181106105d957634e487b7160e01b600052603260045260246000fd5b91151560209283029190910190910152806105f381612b92565b915050610568565b50919050565b80518251146106225760405162461bcd60e51b815260040161049b906129e7565b60005b82518110156107155760006006600085848151811061065457634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518252810191909152604001600020546001600160a01b031690503381148061068d575061068d8133611295565b6106a95760405162461bcd60e51b815260040161049b9061291f565b6107028483815181106106cc57634e487b7160e01b600052603260045260246000fd5b6020026020010151828585815181106106f557634e487b7160e01b600052603260045260246000fd5b6020026020010151611449565b508061070d81612b92565b915050610625565b505050565b60606002805461072990612b31565b80601f016020809104026020016040519081016040528092919081815260200182805461075590612b31565b80156107a25780601f10610777576101008083540402835291602001916107a2565b820191906000526020600020905b81548152906001019060200180831161078557829003601f168201915b50505050509050919050565b6000828152600660205260409020546001600160a01b0316338114806107d957506107d98133611295565b6107f55760405162461bcd60e51b815260040161049b9061291f565b610715838284611449565b60008061080d848461158a565b915091509250929050565b6001600160a01b03851633148061083457506108348533611295565b61089b5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161049b565b6108a885858585856115cc565b5050505050565b606081518351146109145760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161049b565b600083516001600160401b0381111561093d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610966578160200160208202803683370190505b50905060005b8451811015610a08576109cd85828151811061099857634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106109c057634e487b7160e01b600052603260045260246000fd5b6020026020010151610433565b8282815181106109ed57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610a0181612b92565b905061096c565b509392505050565b60013360009081526005602052604090205460ff166002811115610a4457634e487b7160e01b600052602160045260246000fd5b1015610a925760405162461bcd60e51b815260206004820152601f60248201527f417070726f76616c3a206f6e6c79206d696e657220746f206f70657261746500604482015260640161049b565b610a9e86868684611784565b8251855114610abf5760405162461bcd60e51b815260040161049b906129e7565b60005b8551811015610c645760086000878381518110610aef57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182528101919091526040016000205460ff1615610b5a5760405162461bcd60e51b815260206004820152601d60248201527f4e4654313135353a2074686520696420616c7265616479206d696e6564000000604482015260640161049b565b610bb2868281518110610b7d57634e487b7160e01b600052603260045260246000fd5b6020026020010151848381518110610ba557634e487b7160e01b600052603260045260246000fd5b60200260200101516118eb565b610bfe868281518110610bd557634e487b7160e01b600052603260045260246000fd5b6020026020010151888684815181106106f557634e487b7160e01b600052603260045260246000fd5b600160086000888481518110610c2457634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610c5c90612b92565b915050610ac2565b50505050505050565b600061050a8261190a565b6004546001600160a01b03163314610ca25760405162461bcd60e51b815260040161049b906129b2565b610cac6000611952565b565b60013360009081526005602052604090205460ff166002811115610ce257634e487b7160e01b600052602160045260246000fd5b1015610d305760405162461bcd60e51b815260206004820152601f60248201527f417070726f76616c3a206f6e6c79206d696e657220746f206f70657261746500604482015260640161049b565b610d3c868686846119a4565b60008581526008602052604090205460ff1615610d9b5760405162461bcd60e51b815260206004820152601d60248201527f4e4654313135353a2074686520696420616c7265616479206d696e6564000000604482015260640161049b565b610da585836118eb565b610db0858785611449565b505050600091825250600860205260409020805460ff1916600117905550565b336001600160a01b0383161415610e3b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161049b565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60608083516001600160401b03811115610ed157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610efa578160200160208202803683370190505b50915083516001600160401b03811115610f2457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f4d578160200160208202803683370190505b5090506000845184610f5f9190612af2565b905060005b855181101561101257610f9e868281518110610f9057634e487b7160e01b600052603260045260246000fd5b60200260200101518361158a565b858381518110610fbe57634e487b7160e01b600052603260045260246000fd5b60200260200101858481518110610fe557634e487b7160e01b600052603260045260246000fd5b60209081029190910101919091526001600160a01b0390911690528061100a81612b92565b915050610f64565b50509250929050565b600061050a82611a74565b600081815260036020526040902080546060919061072990612b31565b60608082516001600160401b0381111561106d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611096578160200160208202803683370190505b50915082516001600160401b038111156110c057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156110e9578160200160208202803683370190505b50905060005b83518110156111d85761115384828151811061111b57634e487b7160e01b600052603260045260246000fd5b60200260200101516000908152600660209081526040808320546007909252909120546001600160a01b039091169161ffff90911690565b84838151811061117357634e487b7160e01b600052603260045260246000fd5b6020026020010184848151811061119a57634e487b7160e01b600052603260045260246000fd5b602002602001018261ffff1661ffff16815250826001600160a01b03166001600160a01b0316815250505080806111d090612b92565b9150506110ef565b50915091565b6004546001600160a01b031633146112085760405162461bcd60e51b815260040161049b906129b2565b6001600160a01b0382166000908152600560205260409020805482919060ff1916600183600281111561124b57634e487b7160e01b600052602160045260246000fd5b0217905550816001600160a01b03167fe3db383ed6be73b83dd8d70de0d7a91a57662effa97e0e262f3e67a5ce81dfae826040516112899190612857565b60405180910390a25050565b60006112a082611a74565b806112d057506001600160a01b0380841660009081526001602090815260408083209386168352929052205460ff165b9392505050565b6001600160a01b0385163314806112f357506112f38533611295565b6113515760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161049b565b6108a88585858585611a7d565b6004546001600160a01b031633146113885760405162461bcd60e51b815260040161049b906129b2565b6001600160a01b0381166113ed5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161049b565b6113f681611952565b50565b60006001600160e01b03198216636cdb3d1360e11b148061142a57506001600160e01b031982166303a24d0760e21b145b8061050a57506301ffc9a760e01b6001600160e01b031983161461050a565b611f408161ffff16111561149f5760405162461bcd60e51b815260206004820152601d60248201527f4e4654313135353a20726174696f206d6f7265207468616e2038303030000000604482015260640161049b565b6001600160a01b0382166114ff5760405162461bcd60e51b815260206004820152602160248201527f4e4654313135353a2072656365697665722063616e206e6f74206265207a65726044820152606f60f81b606482015260840161049b565b6000838152600760209081526040808320805461ffff191661ffff8616908117909155600683529281902080546001600160a01b0319166001600160a01b0387169081179091558151878152928301939093528101919091527f611d12c0f8b2d9f4cfb23a30f560228db53e712dfcd34bb5b239e702efc2d22f9060600160405180910390a1505050565b600082815260066020908152604080832054600790925282205482916001600160a01b031690612710906115c29061ffff1686612b12565b61080d9190612af2565b81518351146115ed5760405162461bcd60e51b815260040161049b90612a2e565b6001600160a01b0384166116135760405162461bcd60e51b815260040161049b906128da565b3360005b845181101561171657600085828151811061164257634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061166e57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156116be5760405162461bcd60e51b815260040161049b90612968565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906116fb908490612ada565b925050819055505050508061170f90612b92565b9050611617565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611766929190612844565b60405180910390a461177c818787878787611b91565b505050505050565b6001600160a01b0384166117aa5760405162461bcd60e51b815260040161049b90612a76565b81518351146117cb5760405162461bcd60e51b815260040161049b90612a2e565b3360005b8451811015611883578381815181106117f857634e487b7160e01b600052603260045260246000fd5b602002602001015160008087848151811061182357634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461186b9190612ada565b9091555081905061187b81612b92565b9150506117cf565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516118d4929190612844565b60405180910390a46108a881600087878787611b91565b6000828152600360209081526040909120825161071592840190611e1f565b600060015b6001600160a01b03831660009081526005602052604090205460ff16600281111561194a57634e487b7160e01b600052602160045260246000fd5b101592915050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0384166119ca5760405162461bcd60e51b815260040161049b90612a76565b336119e4816000876119db88611cfc565b6108a888611cfc565b6000848152602081815260408083206001600160a01b038916845290915281208054859290611a14908490612ada565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46108a881600087878787611d55565b6000600261190f565b6001600160a01b038416611aa35760405162461bcd60e51b815260040161049b906128da565b33611ab38187876119db88611cfc565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611af45760405162461bcd60e51b815260040161049b90612968565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611b31908490612ada565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610c64828888888888611d55565b6001600160a01b0384163b1561177c5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611bd590899089908890889088906004016126cd565b602060405180830381600087803b158015611bef57600080fd5b505af1925050508015611c1f575060408051601f3d908101601f19168201909252611c1c91810190612599565b60015b611ccc57611c2b612bd9565b806308c379a01415611c655750611c40612bf1565b80611c4b5750611c67565b8060405162461bcd60e51b815260040161049b919061287f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161049b565b6001600160e01b0319811663bc197c8160e01b14610c645760405162461bcd60e51b815260040161049b90612892565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611d4457634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b1561177c5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611d99908990899088908890889060040161272b565b602060405180830381600087803b158015611db357600080fd5b505af1925050508015611de3575060408051601f3d908101601f19168201909252611de091810190612599565b60015b611def57611c2b612bd9565b6001600160e01b0319811663f23a6e6160e01b14610c645760405162461bcd60e51b815260040161049b90612892565b828054611e2b90612b31565b90600052602060002090601f016020900481019282611e4d5760008555611e93565b82601f10611e6657805160ff1916838001178555611e93565b82800160010185558215611e93579182015b82811115611e93578251825591602001919060010190611e78565b50611e9f929150611ea3565b5090565b5b80821115611e9f5760008155600101611ea4565b80356001600160a01b0381168114611ecf57600080fd5b919050565b600082601f830112611ee4578081fd5b81356020611ef182612ab7565b604051611efe8282612b66565b8381528281019150858301600585901b87018401881015611f1d578586fd5b855b85811015611f5d5781356001600160401b03811115611f3c578788fd5b611f4a8a87838c010161203f565b8552509284019290840190600101611f1f565b5090979650505050505050565b600082601f830112611f7a578081fd5b81356020611f8782612ab7565b604051611f948282612b66565b8381528281019150858301600585901b87018401881015611fb3578586fd5b855b85811015611f5d57611fc6826120ad565b84529284019290840190600101611fb5565b600082601f830112611fe8578081fd5b81356020611ff582612ab7565b6040516120028282612b66565b8381528281019150858301600585901b87018401881015612021578586fd5b855b85811015611f5d57813584529284019290840190600101612023565b600082601f83011261204f578081fd5b81356001600160401b0381111561206857612068612bc3565b60405161207f601f8301601f191660200182612b66565b818152846020838601011115612093578283fd5b816020850160208301379081016020019190915292915050565b803561ffff81168114611ecf57600080fd5b6000602082840312156120d0578081fd5b6112d082611eb8565b600080604083850312156120eb578081fd5b6120f483611eb8565b915061210260208401611eb8565b90509250929050565b600080600080600060a08688031215612122578081fd5b61212b86611eb8565b945061213960208701611eb8565b935060408601356001600160401b0380821115612154578283fd5b61216089838a01611fd8565b94506060880135915080821115612175578283fd5b61218189838a01611fd8565b93506080880135915080821115612196578283fd5b506121a38882890161203f565b9150509295509295909350565b600080600080600060a086880312156121c7578081fd5b6121d086611eb8565b94506121de60208701611eb8565b9350604086013592506060860135915060808601356001600160401b03811115612206578182fd5b6121a38882890161203f565b60008060008060008060c0878903121561222a578384fd5b61223387611eb8565b955060208701356001600160401b038082111561224e578586fd5b61225a8a838b01611fd8565b9650604089013591508082111561226f578586fd5b61227b8a838b01611fd8565b95506060890135915080821115612290578283fd5b61229c8a838b01611f6a565b945060808901359150808211156122b1578283fd5b6122bd8a838b01611ed4565b935060a08901359150808211156122d2578283fd5b506122df89828a0161203f565b9150509295509295509295565b600080604083850312156122fe578182fd5b61230783611eb8565b91506020830135801515811461231b578182fd5b809150509250929050565b60008060408385031215612338578182fd5b61234183611eb8565b915060208301356003811061231b578182fd5b60008060408385031215612366578182fd5b61236f83611eb8565b946020939093013593505050565b60008060008060008060c08789031215612395578384fd5b61239e87611eb8565b955060208701359450604087013593506123ba606088016120ad565b925060808701356001600160401b03808211156123d5578384fd5b6122bd8a838b0161203f565b600080604083850312156123f3578182fd5b82356001600160401b0380821115612409578384fd5b818501915085601f83011261241c578384fd5b8135602061242982612ab7565b6040516124368282612b66565b8381528281019150858301600585901b870184018b1015612455578889fd5b8896505b8487101561247e5761246a81611eb8565b835260019690960195918301918301612459565b5096505086013592505080821115612494578283fd5b506124a185828601611fd8565b9150509250929050565b6000602082840312156124bc578081fd5b81356001600160401b038111156124d1578182fd5b6124dd84828501611fd8565b949350505050565b600080604083850312156124f7578182fd5b82356001600160401b038082111561250d578384fd5b61251986838701611fd8565b9350602085013591508082111561252e578283fd5b506124a185828601611f6a565b6000806040838503121561254d578182fd5b82356001600160401b03811115612562578283fd5b61256e85828601611fd8565b95602094909401359450505050565b60006020828403121561258e578081fd5b81356112d081612c7a565b6000602082840312156125aa578081fd5b81516112d081612c7a565b6000602082840312156125c6578081fd5b5035919050565b600080604083850312156125df578182fd5b82359150612102602084016120ad565b60008060408385031215612601578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b838110156126485781516001600160a01b031687529582019590820190600101612623565b509495945050505050565b6000815180845260208085019450808401835b8381101561264857815187529582019590820190600101612666565b60008151808452815b818110156126a75760208185018101518683018201520161268b565b818111156126b85782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a0604082018190526000906126f990830186612653565b828103606084015261270b8186612653565b9050828103608084015261271f8185612682565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061276590830184612682565b979650505050505050565b6040815260006127836040830185612610565b828103602084810191909152845180835285820192820190845b81811015611f5d57845161ffff168352938301939183019160010161279d565b6040815260006127d06040830185612610565b82810360208401526127e28185612653565b95945050505050565b6020808252825182820181905260009190848201906040850190845b81811015612825578351151583529284019291840191600101612807565b50909695505050505050565b6020815260006112d06020830184612653565b6040815260006127d06040830185612653565b602081016003831061287957634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260006112d06020830184612682565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526029908201527f4e4654313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526027908201527f4e4654313135353a2069647320616e6420726174696f73206c656e677468206d6040820152660d2e6dac2e8c6d60cb1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60006001600160401b03821115612ad057612ad0612bc3565b5060051b60200190565b60008219821115612aed57612aed612bad565b500190565b600082612b0d57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612b2c57612b2c612bad565b500290565b600181811c90821680612b4557607f821691505b602082108114156105fb57634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b0381118282101715612b8b57612b8b612bc3565b6040525050565b6000600019821415612ba657612ba6612bad565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612bee57600481823e5160e01c5b90565b600060443d1015612bff5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612c2e57505050505090565b8285019150815181811115612c465750505050505090565b843d8701016020828501011115612c605750505050505090565b612c6f60208286010187612b66565b509095945050505050565b6001600160e01b0319811681146113f657600080fdfea26469706673582212203d52216fafbcb65ffa8f431a3e85fffe096c8edafdca5c48f67c7031e88d89a164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 141,
        "contract": "contracts/NFT1155.sol:NFT1155",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 147,
        "contract": "contracts/NFT1155.sol:NFT1155",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 149,
        "contract": "contracts/NFT1155.sol:NFT1155",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 4342,
        "contract": "contracts/NFT1155.sol:NFT1155",
        "label": "tokenURIs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/NFT1155.sol:NFT1155",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5008,
        "contract": "contracts/NFT1155.sol:NFT1155",
        "label": "approvals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_enum(Level)5001)"
      },
      {
        "astId": 3226,
        "contract": "contracts/NFT1155.sol:NFT1155",
        "label": "receivers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3230,
        "contract": "contracts/NFT1155.sol:NFT1155",
        "label": "ratios",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint16)"
      },
      {
        "astId": 3234,
        "contract": "contracts/NFT1155.sol:NFT1155",
        "label": "mineds",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Level)5001": {
        "encoding": "inplace",
        "label": "enum Level",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(Level)5001)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum Level)",
        "numberOfBytes": "32",
        "value": "t_enum(Level)5001"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}